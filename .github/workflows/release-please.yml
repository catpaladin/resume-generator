name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write
  actions: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

  build-and-release:
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --verbose
          echo "Dependencies installed successfully"
        shell: bash

      - name: Verify Dependencies
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Electron version: $(npx electron --version)"
          echo "Available scripts:"
        shell: bash

      - name: List Available Scripts
        run: npm run
        continue-on-error: true

      - name: Build Next.js App
        run: |
          echo "Building Next.js application..."
          npm run build
          echo "Next.js build completed"
        shell: bash

      - name: Check Build Output
        run: |
          echo "Build output:"
          if [ -d "out" ]; then ls -la out/; else echo "No out directory found"; fi
        shell: bash

      - name: Prepare Build Environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libxkbfile-dev \
            libxcomposite-dev \
            libxdamage1 \
            libxrandr2 \
            libgbm-dev \
            libxss1 \
            libasound2-dev \
            libatspi2.0-0 \
            libgtk-3-0
        shell: bash

      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Building Electron app for macOS..."
          npm run dist:mac -- --publish=never
          echo "macOS build completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          NOTARIZE_APP: false
        shell: bash

      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Building Electron app for Windows..."
          npm run dist:win -- --publish=never
          echo "Windows build completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Build Electron App (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Building Electron app for Linux..."
          npm run dist:linux -- --publish=never
          echo "Linux build completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Check Build Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "=== Windows Build Artifacts ==="
          if (Test-Path "dist") { Get-ChildItem -Path "dist" -Recurse } else { echo "No dist directory found" }
        shell: powershell

      - name: Check Build Artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "=== Build Artifacts ==="
          if [ -d "dist" ]; then find dist -type f; else echo "No dist directory found"; fi
        shell: bash

      - name: Upload Artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
        continue-on-error: true

      - name: Upload Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.zip
        continue-on-error: true

      - name: Upload Artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/*.AppImage
        continue-on-error: true

  upload-release-assets:
    needs: [release-please, build-and-release]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display Structure of Downloaded Files
        run: ls -la ./artifacts/

      - name: Upload Release Assets
        run: |
          # Find and rename files for consistent naming
          find ./artifacts -name "*.dmg" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg" \; 2>/dev/null || true
          find ./artifacts -name "*portable*.exe" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win-portable.exe" \; 2>/dev/null || true
          find ./artifacts -name "*.AppImage" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage" \; 2>/dev/null || true

          # Upload assets to the existing release created by release-please
          assets=""
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg"
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win-portable.exe" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win-portable.exe"
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage"

          if [ -n "$assets" ]; then
            # Add download section to existing release
            current_body=$(gh release view ${{ needs.release-please.outputs.tag_name }} --json body -q .body)
            
            cat > download_section.md << 'EOF'

          ## 📦 Downloads

          Choose the portable app for your operating system:

          - **Windows**: Download the portable `.exe` file (no installation required)
          - **macOS**: Download the `.dmg` file (supports Intel and Apple Silicon)
          - **Linux**: Download the `.AppImage` file

          ### Installation Instructions

          #### Windows
          1. Download the `ResumeGenerator-*-win-portable.exe` file
          2. Double-click to run directly - no installation needed!

          #### macOS (Unsigned App)
          1. Download the `ResumeGenerator-*-mac.dmg` file  
          2. Open the DMG and drag the app to Applications folder
          3. **Important**: Right-click the app → "Open" → "Open" (bypass Gatekeeper warning)
          4. Or run: `xattr -c /Applications/Resume\ Generator.app` in Terminal

          #### Linux
          1. Download the `ResumeGenerator-*-linux.AppImage` file
          2. Make it executable: `chmod +x ResumeGenerator-*-linux.AppImage`
          3. Double-click to run

          ---

          Built with ❤️ using Next.js, React, and Electron
          EOF

            # Update release with new body and upload assets
            gh release edit ${{ needs.release-please.outputs.tag_name }} \
              --notes "$current_body$(cat download_section.md)"
            
            gh release upload ${{ needs.release-please.outputs.tag_name }} $assets
            
            # Trigger GitHub Pages deployment after successful upload
            echo "🚀 Triggering GitHub Pages deployment..."
            gh workflow run deploy-pages.yml \
              --field tag_name="${{ needs.release-please.outputs.tag_name }}" \
              --repo ${{ github.repository }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
