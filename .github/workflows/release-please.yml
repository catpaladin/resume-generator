name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

  build-and-release:
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --verbose
          echo "Dependencies installed successfully"

      - name: Verify Dependencies
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Electron version: $(npx electron --version)"
          echo "Available scripts:"
          npm run --silent 2>/dev/null || echo "No scripts available"

      - name: Build Next.js App
        run: |
          echo "Building Next.js application..."
          npm run build
          echo "Next.js build completed"
          echo "Build output:"
          ls -la out/ || echo "No out directory found"

      - name: Prepare Build Environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libxkbfile-dev libxss1 libgconf-2-4

      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Building Electron app for macOS..."
          echo "CSC_IDENTITY_AUTO_DISCOVERY=false" >> $GITHUB_ENV
          npm run dist:mac -- --publish=never
          echo "macOS build completed"
          echo "Build artifacts:"
          ls -la dist/ || echo "No dist directory found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Building Electron app for Windows..."
          npm run dist:win -- --publish=never
          echo "Windows build completed"
          echo "Build artifacts:"
          dir dist\ || echo "No dist directory found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron App (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Building Electron app for Linux..."
          npm run dist:linux -- --publish=never
          echo "Linux build completed"
          echo "Build artifacts:"
          ls -la dist/ || echo "No dist directory found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Build Output
        run: |
          echo "=== Build Directory Contents ==="
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            dir dist\ /s || echo "No dist directory found"
          else
            find dist -type f 2>/dev/null || echo "No dist directory found"
          fi

      - name: Upload Artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
        continue-on-error: true

      - name: Upload Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.msi
        continue-on-error: true

      - name: Upload Artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
        continue-on-error: true

  upload-release-assets:
    needs: [release-please, build-and-release]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display Structure of Downloaded Files
        run: ls -la ./artifacts/

      - name: Upload Release Assets
        run: |
          # Find and rename files for consistent naming
          find ./artifacts -name "*.dmg" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg" \; 2>/dev/null || true
          find ./artifacts -name "*.exe" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win.exe" \; 2>/dev/null || true
          find ./artifacts -name "*.AppImage" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage" \; 2>/dev/null || true
          find ./artifacts -name "*.deb" -exec mv {} "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.deb" \; 2>/dev/null || true
          
          # Upload assets to the existing release created by release-please
          assets=""
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-mac.dmg"
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win.exe" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-win.exe"
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.AppImage"
          [ -f "./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.deb" ] && assets="$assets ./ResumeGenerator-${{ needs.release-please.outputs.tag_name }}-linux.deb"
          
          if [ -n "$assets" ]; then
            # Add download section to existing release
            current_body=$(gh release view ${{ needs.release-please.outputs.tag_name }} --json body -q .body)
            
            cat > download_section.md << 'EOF'
          
          ## 📦 Downloads
          
          Choose the installer for your operating system:
          
          - **Windows**: Download the `.exe` file below
          - **macOS**: Download the `.dmg` file below (supports Intel and Apple Silicon)
          - **Linux**: Download the `.AppImage` or `.deb` file below
          
          ### Installation
          - **Windows**: Run the `.exe` installer
          - **macOS**: Open the `.dmg` file and drag to Applications folder
          - **Linux**: Make the `.AppImage` executable (`chmod +x *.AppImage`) or install the `.deb` package
          
          ---
          
          Built with ❤️ using Next.js, React, and Electron
          EOF
          
            # Update release with new body and upload assets
            gh release edit ${{ needs.release-please.outputs.tag_name }} \
              --notes "$current_body$(cat download_section.md)"
            
            gh release upload ${{ needs.release-please.outputs.tag_name }} $assets
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}